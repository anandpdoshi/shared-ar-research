var sharedAR = {
    init_renderer: function(canvas_id) {
        // Init WebGL Renderer
        this.renderer = new THREE.WebGLRenderer({
            canvas: document.getElementById(canvas_id),
            antialias: true,
            alpha: true
        });

        // canvas size and pixel ratio
        this.renderer.setPixelRatio(window.devicePixelRation);
        this.renderer.setSize(window.innerWidth, window.innerHeight);

        this.on_render_functions = [];
    },

    init_scene: function() {
        this.scene = new THREE.Scene();
    },

    init_camera: function() {
        this.camera = new THREE.Camera();
        this.scene.add(this.camera);
    },

    init_profile: function() {
        this.profile = new THREEx.ArToolkitProfile();
        this.profile.sourceWebcam();
        this.profile.contextParameters.cameraParametersUrl = '/data/camera_para.dat';
        this.profile.defaultMarkerParameters.patternUrl = '/data/patt.hiro';
    },

    init_source: function() {
        var me = this;

        this.source = new THREEx.ArToolkitSource(this.profile.sourceParameters);

        this.source.init(function onReady() {
            me.on_resize();
        });

        window.addEventListener('resize', function() {
            me.on_resize();
        });
    },

    on_resize: function() {
        this.source.onResizeElement();
        this.source.copyElementSizeTo(this.renderer.domElement);
        if (this.context.arController != null) {
            this.source.copyElementSizeTo(this.context.arController.canvas);
        }
    },

    init_context: function() {
        var me = this;

        this.context = new THREEx.ArToolkitContext(this.profile.contextParameters);

        this.context.init(function onCompleted() {
            // copy projection matrix to camera
            // NOTE why is this necessary?
            me.camera.projectionMatrix.copy( me.context.getProjectionMatrix() );
        });

        this.on_render_functions.push(function() {
            if (me.source.ready == false) return;

            me.context.update(me.source.domElement);
        });
    },

    init_marker: function() {
        this.marker_group = new THREE.Group();  // v/s new THREE.Group
        this.scene.add(this.marker_group);

        this.marker = new THREEx.ArMarkerControls(this.context, this.marker_group, {
            type: 'pattern',
            patternUrl: '/data/patt.hiro'
        });
    },

    init_object_at_marker: function() {
        this.marker_scene = new THREE.Scene();
        this.marker_group.add(this.marker_scene);

        this.axis_helper_mesh = new THREE.AxisHelper();
        this.marker_scene.add(this.axis_helper_mesh);

        // add a torus knot
        var cube_mesh = this.get_cube_mesh();
        this.marker_scene.add(cube_mesh);

        var torus_knot_mesh = this.get_torus_knot_mesh();
        this.marker_scene.add(torus_knot_mesh);

        this.on_render_functions.push(function(delta) {
            torus_knot_mesh.rotation.x += delta * Math.PI;
        });
    },

    get_cube_mesh: function() {
        var geometry = new THREE.CubeGeometry(1, 1, 1);
        var material = new THREE.MeshNormalMaterial({
            transparent: true,
            opacity: 0.5,
            side: THREE.DoubleSide
        });
        var mesh = new THREE.Mesh( geometry, material );
        mesh.position.y = geometry.parameters.height / 2;
        return mesh;
    },

    get_torus_knot_mesh: function() {
        var geometry = new THREE.TorusKnotGeometry(0.3, 0.1, 64, 16);
        var material = new THREE.MeshNormalMaterial();
        var mesh = new THREE.Mesh( geometry, material );
        mesh.position.y = 0.5;
        return mesh;
    },

    render: function() {
        var me = this;
        sharedAR.init_renderer('ar-canvas');
        sharedAR.init_scene();
        sharedAR.init_camera();
        sharedAR.init_profile();
        sharedAR.init_source();
        sharedAR.init_context();
        sharedAR.init_marker();
        sharedAR.init_object_at_marker();

        // run the render loop
        var prev_ms = null;
        requestAnimationFrame(function animate(now_ms) {
            // keep looping
            requestAnimationFrame( animate );

            // measure time
            prev_ms = prev_ms || now_ms - 1000 / 60;
            var delta_ms = Math.min(200, now_ms - prev_ms);
            prev_ms = now_ms;

            // call each update function
            me.on_render_functions.forEach(function(on_render_fn) {
                on_render_fn(delta_ms / 1000, now_ms / 1000);
            });
        });

    },
};

sharedAR.render();
